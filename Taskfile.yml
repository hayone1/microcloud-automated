version: '3'

env:
  ANSIBLE_INVENTORY: hosts.yml
    
  # TF_LOG: 1

vars:
  INIT_TAGS: prerequisite
  MAIN_PLAYBOOK: deploy-microcloud.yml
  INFRA_TEMPLATE: ./infra-template

tasks:
  ############# Checks #############
  # Run the tasks in sequence
  check:
    cmds:
      - task: yq_check
      - task: terraform_check
      - task: ansible_check
  # Define tasks
  terraform_check:
    desc: Check if Terraform is installed
    internal: true
    silent: true
    cmds:
      - |
        if command -v terraform &> /dev/null; then
          echo "✅️ Terraform is installed."
        else
          echo "❌ Terraform is not installed. See https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli"
          exit 10
        fi
  ansible_check:
    desc: Check if Ansible is installed
    internal: true
    silent: true
    cmds:
      - |
        if command -v ansible &> /dev/null; then
          echo "✅️ Ansible is installed."
        else
          echo "❌ Ansible is not installed. See https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html"
          exit 10
        fi
  yq_check:
    desc: Check if yq is installed
    internal: true
    silent: true
    cmds:
      - |
        if command -v yq &> /dev/null; then
          echo "✅️ yq is installed."
        else
          echo "❌ yq is not installed. https://github.com/mikefarah/yq/#install"
          exit 10
        fi
  envvar_check:
    vars:
      # get from parent
      PROVIDER: '{{default "undefined" .PROVIDER}}'
      GROUP: '{{default "undefined" .GROUP}}'
      REQUIRED_VARS:
        sh: |-
          if [ -f "./{{.INFRA_TEMPLATE}}/{{.PROVIDER}}/config.yml" ]; then
            yq '.required_env | join(" ")' "./{{.INFRA_TEMPLATE}}/{{.PROVIDER}}/config.yml"
          fi
    dotenv: ['./group_vars/{{.GROUP}}.env', './group_vars/.env', '.env']
    cmds:
      - for: { var: REQUIRED_VARS }
        cmd: |
          if [[ -v {{.ITEM}} ]]; then
              echo "✅️ Verify that env variable {{.ITEM}} is present for provider {{.PROVIDER}}."
          else
              echo "❌ Verify that env variable {{.ITEM}} is present for provider {{.PROVIDER}}."
              exit 12
          fi
  ############# Check if packages are installed #############

  ############# Deploy Infra #############
  default:
    vars:
      MY_VAR: |-
        foo.txt
        bar.txt
    cmds:
      - for: { var: MY_VAR, split: '\n' }
        cmd: echo {{.ITEM}}

  infra-deploy:
    vars:
      GROUPS:
        sh: yq '.groups | join(" ")' "./group_vars/all.yml"
    cmds:
      - for: { var: GROUPS }
        task: deploy-group-infra
        vars:
          GROUP: '{{.ITEM}}'
        # silent: true

  deploy-group-infra:
    desc: creates infra resources from the {{.INFRA_TEMPLATE}} and provided values.
    internal: true
    silent: true
    vars:
      GROUP: '{{default "invalid" .GROUP}}'
      PROVIDERS:
        sh: yq '.infra_providers | keys | join(" ")' "./group_vars/{{.GROUP}}.yml"
    cmds:
      # has not effect if no env var is needed.
      - for: { var: PROVIDERS }
        task: envvar_check
        vars:
          GROUP: '{{ .GROUP }}'
          PROVIDER: '{{ .ITEM }}'
        silent: true
      # create a folder for the infra provider
      - for: { var: PROVIDERS }
        cmd: |-
          host_exists=$(yq '.infra_providers.{{.ITEM}} |
            has("hosts")' 'group_vars/{{.GROUP}}.yml')
          
          if  [ "$host_exists" == 'false' ] &&
              [ -d {{.INFRA_TEMPLATE}}/{{.ITEM}} ]; then
            mkdir -p ./infra-{{.GROUP}}
            cp -r {{.INFRA_TEMPLATE}}/{{.ITEM}} ./infra-{{.GROUP}}
          fi
      - for: { var: PROVIDERS }
        task: deploy-provider-infra
        vars:
          GROUP: '{{ .GROUP }}'
          PROVIDER: '{{ .ITEM }}'
      # - for: { var: PROVIDERS }
      #   cmd: echo "provider name is {{.ITEM}}"

  deploy-provider-infra:
    desc: deploys the configured infra for the specified cloud provider.
    internal: true
    silent: true
    vars:
      PROVIDER: '{{default "undefined" .PROVIDER}}'
      GROUP: '{{default "undefined" .GROUP}}'
      # set the task to get ips based on if the cloud provider
      # is supported ot arbitrary
      GET_IP_TASK:
        sh: |
          if [ -d ./infra-{{.GROUP}}/{{.PROVIDER}} ]; then
            echo "get-ips-provider"
          else
            echo "get-ips-custom"
          fi
    dotenv: ['./group_vars/{{.GROUP}}.env', './group_vars/.env', '.env']
    cmds:
      # condition: if the provider's folder has been created and the tfstate file does not exist yet
      - echo "creating infra for provider - {{.PROVIDER}}"
      - |
        if [ -d ./infra-{{.GROUP}}/{{.PROVIDER}} ] &&
           [ ! -f ./infra-{{.GROUP}}/{{.PROVIDER}}/terraform.tfstate ]; then
          terraform -chdir=./infra-{{.GROUP}}/{{.PROVIDER}} init
        fi
      - |
        if [ -d ./infra-{{.GROUP}}/{{.PROVIDER}} ] &&
           [ ! -f ./infra-{{.GROUP}}/{{.PROVIDER}}/terraform.tfstate ]; then
          terraform -chdir=./infra-{{.GROUP}}/{{.PROVIDER}} plan \
            -var "provider_token=${DO_PAT}"
        fi
      - |
        if [ -d ./infra-{{.GROUP}}/{{.PROVIDER}} ] &&
           [ ! -f ./infra-{{.GROUP}}/{{.PROVIDER}}/terraform.tfstate ]; then
          terraform -chdir=./infra-{{.GROUP}}/{{.PROVIDER}} apply \
            -var "provider_token=${DO_PAT}" {{.CLI_ARGS}}
        fi
      - task: '{{.GET_IP_TASK}}'
        silent: true
        vars:
          GROUP: '{{.GROUP}}'
          PROVIDER: '{{.PROVIDER}}'
        # silent: true

  get-ips-provider:
    vars:
      # get from parent
      GROUP: '{{default "undefined" .GROUP}}'
      PROVIDER: '{{default "undefined" .PROVIDER}}'
      GET_IP_COMMAND:
        sh: yq '.get-ips' './infra-{{.GROUP}}/{{.PROVIDER}}/config.yml' | tr -d '\n'
    cmds:
      - export "{{.GROUP}}_{{.PROVIDER}}_ips={{.GET_IP_COMMAND}} ./infra-{{.GROUP}}/{{.PROVIDER}}/terraform.tfstate"
      - |
        echo "IPs for [{{.GROUP}}|{{.PROVIDER}}]: ${{.GROUP}}_{{.PROVIDER}}_ips"
      - |
        formatted_IPs=$(yq --null-input 'strenv({{.GROUP}}_{{.PROVIDER}}_ips) |
          split(",") |
          .[] as $IPs ireduce({}; .[$IPs | . style="flow"] = "<remove-this>")')

        result=$(echo "$formatted_IPs" |
          yq eval-all 'select(fileIndex == 1) as $provider_hosts |
              select(fileIndex == 0) |
              .{{.GROUP}}.children.{{.PROVIDER}}.hosts = (.{{.GROUP}}.children.{{.PROVIDER}}.hosts * $provider_hosts |
              sort_keys(..))' hosts.yml -)

        echo "${result//" <remove-this>"/''}" > hosts.yml
      - echo "✅️ hosts.yml updated successfully"

  
  # others
  get-ips-custom:
    vars:
      # get from parent
      GROUP: '{{default "undefined" .GROUP}}'
      PROVIDER: '{{default "undefined" .PROVIDER}}'
    cmds:
    # 1 is the source(right), 0 is the destination(left)
    - | 
      echo "IPs for [{{.GROUP}}|{{.PROVIDER}}]: \
        $(yq '.infra_providers.{{.PROVIDER}}.hosts | keys | join(",")' ./group_vars/{{.GROUP}}.yml)"
    - |
      yq --inplace eval-all '(select(fileIndex == 1) | .infra_providers.{{.PROVIDER}}.hosts) as $provider_hosts |
                    select(fileIndex == 0) |
                    .{{.GROUP}}.children.{{.PROVIDER}}.hosts = (.{{.GROUP}}.children.{{.PROVIDER}}.hosts * $provider_hosts | sort_keys(..))' \
          hosts.yml ./group_vars/{{.GROUP}}.yml
    - echo "✅️ hosts.yml updated successfully"

  ############# Deploy Infra #############

  ############# Destroy Infra #############
  infra-destroy:
    vars:
      GROUPS:
        sh: yq '.groups | join(" ")' "./group_vars/all.yml"
    cmds:
      - for: { var: GROUPS }
        task: destroy-group-infra
        vars:
          GROUP: '{{.ITEM}}'
      - for: { var: GROUPS }
        cmd: yq --inplace 'del(.{{.ITEM}})' hosts.yml
      - for: { var: GROUPS }
        cmd: rm -rf infra-{{.ITEM}}
        # silent: true
  
  destroy-group-infra:
    desc: destroys the infra resources created.
    internal: true
    # silent: true
    vars:
      GROUP: '{{default "invalid" .GROUP}}'
      PROVIDERS:
        sh: yq '.infra_providers | keys | join(" ")' "./group_vars/{{.GROUP}}.yml"
    dotenv: ['./group_vars/{{.GROUP}}.env', './group_vars/.env', '.env']
    cmds:
      # env variables also need to exist for destroy
      - for: { var: PROVIDERS }
        task: envvar_check
        vars:
          GROUP: '{{ .GROUP }}'
          PROVIDER: '{{ .ITEM }}'
        silent: true
      - for: { var: PROVIDERS }
        cmd: |-
          if [ -f ./infra-{{.GROUP}}/{{.ITEM}}/terraform.tfstate ]; then
            terraform -chdir=./infra-{{.GROUP}}/{{.ITEM}} destroy \
              -var "provider_token=${DO_PAT}" {{.CLI_ARGS}}
          fi
        silent: true
  ############# Destroy Infra #############
  # example usage task list-all-dev
  # where dev will be the group
  list-all-*:
    vars:
      GROUP: '{{index .MATCH 0}}'
    cmds:
      - ansible-playbook --limit {{.GROUP}} --list-tasks --list-hosts {{.MAIN_PLAYBOOK}}
  list-init-*: 
    vars:
      GROUP: '{{index .MATCH 0}}'
    cmds:
      - |-
        ansible-playbook --limit {{.GROUP}} --tags {{.INIT_TAGS}}\
          --list-tasks --list-hosts {{.MAIN_PLAYBOOK}}
  init-*:
    vars:
      GROUP: '{{index .MATCH 0}}'
    cmds:
      - ansible-playbook --limit {{.GROUP}} --tags {{.INIT_TAGS}}{{.MAIN_PLAYBOOK}}
  deploy-all-*:
    vars:
      GROUP: '{{index .MATCH 0}}'
    cmds:
      - ansible-playbook --limit {{.GROUP}} {{.MAIN_PLAYBOOK}}