

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present

- name: Persist IPv4 forwarding setting
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^net.ipv4.ip_forward'
    line: 'net.ipv4.ip_forward=1'

- name: Get default netplan
  shell:
    cmd: yq -o=json $(ls /etc/netplan | tail -n 1) | tr '\n' ' '
    chdir: /etc/netplan
  register: default_netplan

- name: Get default netplan macaddress
  shell:
    cmd: echo {{default_netplan.stdout}} | yq '..| select(has("macaddress")) | .macaddress' | head -n 1
  register: default_macaddress

- name: Create bridge and tunnel temp configs
  local_action:
    module: ansible.builtin.template
    src: templates/netplan.j2
    dest: '{{netplan_file}}.temp{{tunnel_id}}'
  vars:
    bridge_netmask: "{{ lookup_subnet | ansible.utils.ipaddr('prefix')}}"
    host_index: "{{ index_key }}"
    ip_cidr: '{{ lookup_subnet | ansible.utils.next_nth_usable(host_index | int) }}/{{ bridge_netmask }}'
    #######
    tunnel_iface_id: "{{ index_key }}{{ hostvars[item]['index_key'] }}"
    tunnel_id: '{{tunnel_iface_id | sort | join()}}'
    tunnel_name: tunnel_{{tunnel_id}}
    #######
    netplan_file: 'infra-{{ansible_limit}}/{{ ansible_nodename }}-netplan.yml'
  when: inventory_hostname != item
  loop: "{{ groups[ansible_limit] }}"
  become: false

# - name: Get bridge ip
#   shell: ip -o addr show | grep {{ lookup_bridge }} | awk '{print $4}' | head -n 1
#   register: bridge_ip

- name: Merge bridge and tunnel configs
  local_action:
    module: ansible.builtin.shell
    cmd: >-
      yq eval-all '. as $item ireduce ({}; . * $item)'
      *-{{ index_key }}-netplan.yml.temp* > {{ netplan_file }}
    # creates: '{{ ansible_nodename }}-netplan.yml'
    chdir: infra-{{ansible_limit}}
  vars:
    netplan_file: '{{ ansible_nodename }}-netplan.yml'
  become: false

- name: Cleanup bridge and tunnel configs
  local_action:
    module: ansible.builtin.shell
    cmd: >-
      yq -i '.network.bridges.{{lookup_bridge}}.interfaces =
      (.network.tunnels | keys)' {{ netplan_file }}
    # creates: '{{ ansible_nodename }}-netplan.yml'
    chdir: infra-{{ansible_limit}}
  vars:
    netplan_file: '{{ ansible_nodename }}-netplan.yml'
  become: false

- name: Delete bridge and tunnel temp configs
  run_once: true
  local_action:
    module: ansible.builtin.shell
    cmd: rm -r *-netplan.yml.temp*
    chdir: infra-{{ansible_limit}}
  vars:
    netplan_file: '{{ ansible_nodename }}-netplan.yml'
  become: false

- name: Save netplan in remote host
  copy:
    src: '{{ netplan_file }}'
    dest: '{{ dest_netplan_file }}'
    # mode: '0600'
  vars:
    netplan_file: 'infra-{{ansible_limit}}/{{ ansible_nodename }}-netplan.yml'
    dest_netplan_file: /etc/netplan/10{{index_key}}-microcloud.yaml
  
- name: Merge all netplan in new netplan in host
  command:
    cmd: |-
      yq -i '. * {{default_netplan.stdout}}' {{ dest_netplan_file }}
    chdir: /etc/netplan
  vars:
    dest_netplan_file: '10{{index_key}}-microcloud.yaml'

- name: Apply netplan config immediately
  shell: chmod 600 {{dest_netplan_file}} && netplan apply
  vars:
    dest_netplan_file: /etc/netplan/10{{index_key}}-microcloud.yaml

- name: Restart systemd-resolved Immediately
  service:
    name: systemd-resolved
    state: restarted

- name: Configure ufw allow on bridge interface {{ lookup_bridge }}
  shell: |
    ufw allow in on {{ lookup_bridge }}
    ufw route allow in on {{ lookup_bridge }}
    ufw route allow out on {{ lookup_bridge }}

- name: Ping test all-to-all network connectivity
  command: |-
    ping -c 2 {{ dest_ip }}
  vars:
    host_index: "{{ hostvars[item]['index_key'] }}"
    dest_ip: '{{ lookup_subnet | ansible.utils.next_nth_usable(host_index | int) }}'
  loop: "{{ groups[ansible_limit] }}"
  # when: inventory_hostname != item
  register: ping_results
  retries: 3
  delay: 3
  until: ping_results.rc == 0